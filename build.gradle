plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.7'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'application'
	id 'com.diffplug.spotless' version '6.25.0'
}

application {
	mainClass = 'com.alphawash.AlphawashApplication'
}

group = project.group
version = project.version

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Open this two when we have database, for now we leave it comment
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'org.postgresql:postgresql:42.7.2'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
	implementation 'org.glassfish:jakarta.el:4.0.2'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
jar {
	manifest {
		attributes(
				'Main-Class': application.mainClass
		)
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
spotless {
	java {
		target 'src/**/*.java'
		indentWithSpaces(4)
		palantirJavaFormat('2.28.0')
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}

	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		endWithNewline()
	}
}
